

@if (User.Identity.IsAuthenticated)
{
    <a href="~/Account/Logout">Выйти</a>
}
else
{
    <a href="~/Account/Login">Войти</a>
}

<div id="userNameBlock">
    Введите ник:<br />
    <input id="userName" type="text" />
    <input id="loginBtn" type="button" value="Установить" />
</div>
<br />

<div id="header"></div>


@if (User.IsInRole("admin"))
{
    <br /><div id="notifyForm">
        <input type="text" id="idDialog" />
        <input type="text" id="notify" />

        <input type="button" id="notifyBtn" value="Уведомление" />
    </div>
}
else
{
    <br />

    <div id="inputForm">
        <input type="text" id="message" />
        <input type="button" id="sendBtn" value="Отправить" />
    </div>

}
<div id="messageInput" hidden>
    <input type="text" id="connectionStatus" hidden />
    <input type="button" id="sendButton" value="Отправить" hidden />
</div>

<div id="chatroom"></div>








<script>
    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/chat")
        .withAutomaticReconnect()
        .build();


    let userName = "";
  ;
    // получение сообщения от сервера
    hubConnection.on("Receive", function (mes) {


        let servmessage = document.createElement("div");

        if (mes.senderType == "in") {

            servmessage.className = "chat first";
        }
        else {

            servmessage.className = "chat second";

        }




        servmessage.appendChild(document.createTextNode('Name:' + mes.dialogId));
        // создает элемент <p> для сообщения пользователя
        let elem = document.createElement("p");
        elem.appendChild(document.createTextNode(mes.text));
        servmessage.appendChild(elem);





        var firstElem = document.getElementById("chatroom").firstChild;
        document.getElementById("chatroom").insertBefore(servmessage, firstElem);

    });
    hubConnection.serverTimeoutInMilliseconds = 100000; // 100 second


    hubConnection.onreconnecting((error) => {
        const status = `Connection lost due to error "${error}". Reconnecting.`;
        document.getElementById("messageInput").disabled = true;
        document.getElementById("sendButton").disabled = true;
        document.getElementById("connectionStatus").innerText = status;
    });

    hubConnection.onreconnected((connectionId) => {
        const status = `Connection reestablished. Connected.`;
        document.getElementById("messageInput").disabled = false;
        document.getElementById("sendButton").disabled = false;
        document.getElementById("connectionStatus").innerText = status;
    });

    // установка имени пользователя
    document.getElementById("loginBtn").addEventListener("click", function (e) {
        userName = document.getElementById("userName").value;
        document.getElementById("header").innerHTML = "<h3>Welcome " + userName + "</h3>";

        hubConnection.invoke("SendTechnical", {"Name": userName });


    });

    // если администратор добавляем блок
    @if (User.IsInRole("admin"))
    {
        // отправка сообщения от администратора
        <text>
        document.getElementById("notifyBtn").addEventListener("click", function(e) {
            let message = document.getElementById("notify").value;
            let idDialog = document.getElementById("idDialog").value;

            hubConnection.invoke("SendAdmin", { "Text": message, "Name": message, "DialogId": idDialog, "SenderType": "in"});
        });
        </text>
    }
    else
    {
        // отправка сообщения от простого пользователя
          <text>

    document.getElementById("chat-submit").addEventListener("click", function(e) {
            let text = document.getElementById("chat-input").value;
            hubConnection.invoke("Send", { "Text": text, "Name": text, "SenderType": "in" });
        });
      </text>
    }
    hubConnection.start();
</script>












