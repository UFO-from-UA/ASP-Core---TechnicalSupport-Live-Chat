// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechnicalSupport.Data;

namespace TechnicalSupport.Migrations
{
    [DbContext(typeof(ChatContext))]
    [Migration("20210219104731_one")]
    partial class one
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("TechnicalSupport.Models.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Chat")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StatusNavigationId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("StatusNavigationId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("LocalHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SexId")
                        .HasColumnType("int");

                    b.Property<string>("UserIp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Dialog", b =>
                {
                    b.Property<Guid>("DialogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DialogId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Dialogs");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SexId")
                        .HasColumnType("int");

                    b.Property<bool>("StatusOnline")
                        .HasColumnType("bit");

                    b.Property<int>("WorkTime")
                        .HasColumnType("int");

                    b.Property<int?>("WorkTimeNavigationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("WorkTimeNavigationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TechnicalSupport.Models.EmployeeTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("Guidemployy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GuidemployyNavigationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TaskCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuidemployyNavigationId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DialogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DialogId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("TechnicalSupport.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("DialogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status1")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DialogId")
                        .IsUnique();

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("TechnicalSupport.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26be7a6e-8e5f-4dd4-8346-0c40bbbeca28"),
                            Email = "admin@mail.com",
                            Password = "123456",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("a23447f3-aff9-4488-8d5b-49aa91c25dc3"),
                            Email = "bob@mail.com",
                            Password = "123456",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("82703972-0242-48f0-a2e4-77dd30e387fe"),
                            Email = "sam@mail.com",
                            Password = "123456",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("TechnicalSupport.Models.WorkTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("WorkTimes");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Application", b =>
                {
                    b.HasOne("TechnicalSupport.Models.Status", "StatusNavigation")
                        .WithMany("Applications")
                        .HasForeignKey("StatusNavigationId");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Dialog", b =>
                {
                    b.HasOne("TechnicalSupport.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechnicalSupport.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Employee", b =>
                {
                    b.HasOne("TechnicalSupport.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("TechnicalSupport.Models.WorkTime", "WorkTimeNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("WorkTimeNavigationId");

                    b.Navigation("Role");

                    b.Navigation("WorkTimeNavigation");
                });

            modelBuilder.Entity("TechnicalSupport.Models.EmployeeTask", b =>
                {
                    b.HasOne("TechnicalSupport.Models.Employee", "GuidemployyNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("GuidemployyNavigationId");

                    b.Navigation("GuidemployyNavigation");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Message", b =>
                {
                    b.HasOne("TechnicalSupport.Models.Dialog", "Dialog")
                        .WithMany()
                        .HasForeignKey("DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dialog");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Status", b =>
                {
                    b.HasOne("TechnicalSupport.Models.Dialog", "Dialog")
                        .WithOne("Status")
                        .HasForeignKey("TechnicalSupport.Models.Status", "DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dialog");
                });

            modelBuilder.Entity("TechnicalSupport.Models.User", b =>
                {
                    b.HasOne("TechnicalSupport.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Dialog", b =>
                {
                    b.Navigation("Status");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Employee", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TechnicalSupport.Models.Status", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("TechnicalSupport.Models.WorkTime", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
